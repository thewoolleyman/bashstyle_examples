#!/usr/bin/env bash

set -e # exit on error if we fail while sourcing bash-boilerplate.sh
source "$(dirname ${BASH_SOURCE})/bash-boilerplate.sh"
# If you have `realpath` installed (`brew install coreutils` on MacOS),
# and want to have a use relative reference to source bash-boilerplate.sh
# from a different directory via `../` but still have it result in a
# clean absolute path with no dots, then the following alternative to the
# above command will remove the dots.
# source $(realpath "$(dirname "${BASH_SOURCE}")/bash-boilerplate.sh")

onexit_hook() {
  # This can contain any additional logic to be performed on exit, regardless of exit code success/failure.
  echo 'Exiting ${BASH_SOURCE}...'
}

bye() {
  local should_be_excited="${1}"
  printf "Bye, %s" "${name}"
  if ${should_be_excited}; then
    printf '!!!'
  fi
  printf "\n"
}

print_usage_and_exit() {
  printf "Usage:\n"
  printf "  bash-example [options] bye name\n"
  printf "\n"
  printf "  Prints 'Bye, <name>'\n"
  printf "\n"
  printf "Options:\n"
  printf "    -d, --debug                 Debug git-rflow script with bash xtrace\n"
  printf "    -e, --excited               Makes bye excited!\n"
  printf "    -f, --fail                  Force script to fail and demonstrate onexit hooks\n"
  printf "    -h, --help                  Display this [h]elp\n"
  printf "    -V, --version               Display the program [v]ersion\n"
  printf "    --                          Ignore all following options\n"
  printf "\nSee https://github.com/thewoolleyman/bashstyle_examples/tree/master for more information.\n"
  exit 1
}

print_error_and_exit() {
  echo "${1}" >&2
  printf "'git-rflow --help' for usage.\n"
  exit 1
}

parse_options() {
  local excited=false
  local version='0.1'

  # see http://stackoverflow.com/a/13864829/25192
  if [[ -z "${1+x}" ]]; then
    print_usage_and_exit
  fi

  if [[ "${1}" == '--' ]]; then
    print_usage_and_exit
  fi

  # from http://mywiki.wooledge.org/BashFAQ/035
  while :; do
    case ${1} in
      bye)
        if [[ ${2} ]]; then
          local name=${2}
          shift 2
          continue
        else
          print_error_and_exit "ERROR: A name must be passed to the 'bye' command."
        fi
        ;;
      -d|--debug)
        # shellcheck disable=SC2034
        BASH_XTRACE='true'
        handle_bash_xtrace
        ;;
      -e|--excited)
        excited=true
        ;;
      -f|--fail)
        ls /dev/nonexistent_file
        ;;
      -h|--help)
        print_usage_and_exit
        ;;
      -V|--version)
        printf "Version %s\n" ${version}
        exit 0
        ;;
      --) # ignore all following options
        shift
        break
        ;;
      *)
        # see http://stackoverflow.com/a/13864829/25192
        if [[ -z "${1+x}" ]]; then
          break
        else
          print_error_and_exit "ERROR: Unrecognized parameter '${1}'"
        fi
    esac

    shift
  done

  bye ${excited}
}

main() {
  parse_options "${@}"
}

set +o nounset
main "${@}"
set -o nounset
